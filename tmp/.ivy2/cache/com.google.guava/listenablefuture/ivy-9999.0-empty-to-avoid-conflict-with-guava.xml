<?xml version="1.0" encoding="UTF-8"?>
<ivy-module version="2.0" xmlns:m="http://ant.apache.org/ivy/maven" xmlns:e="http://ant.apache.org/ivy/extra">
	<info organisation="com.google.guava"
		module="listenablefuture"
		revision="9999.0-empty-to-avoid-conflict-with-guava"
		status="release"
		publication="20180911194043"
	>
		<license name="The Apache Software License, Version 2.0" url="http://www.apache.org/licenses/LICENSE-2.0.txt" />
		<description homepage="">
		An empty artifact that Guava depends on to signal that it is providing
    ListenableFuture -- but is also available in a second &quot;version&quot; that
    contains com.google.common.util.concurrent.ListenableFuture class, without
    any other Guava classes. The idea is:

    - If users want only ListenableFuture, they depend on listenablefuture-1.0.

    - If users want all of Guava, they depend on guava, which, as of Guava
    27.0, depends on
    listenablefuture-9999.0-empty-to-avoid-conflict-with-guava. The 9999.0-...
    version number is enough for some build systems (notably, Gradle) to select
    that empty artifact over the &quot;real&quot; listenablefuture-1.0 -- avoiding a
    conflict with the copy of ListenableFuture in guava itself. If users are
    using an older version of Guava or a build system other than Gradle, they
    may see class conflicts. If so, they can solve them by manually excluding
    the listenablefuture artifact or manually forcing their build systems to
    use 9999.0-....
		</description>
		<m:dependency.management__junit__junit__version>4.11</m:dependency.management__junit__junit__version>
		<m:properties__truth.version>0.41</m:properties__truth.version>
		<m:dependency.management__org.checkerframework__checker-compat-qual__version>2.5.2</m:dependency.management__org.checkerframework__checker-compat-qual__version>
		<m:dependency.management__com.google.errorprone__error_prone_annotations__version>2.1.3</m:dependency.management__com.google.errorprone__error_prone_annotations__version>
		<m:dependency.management__com.google.truth__truth__version>0.41</m:dependency.management__com.google.truth__truth__version>
		<m:dependency.management__com.google.jimfs__jimfs__scope>test</m:dependency.management__com.google.jimfs__jimfs__scope>
		<m:properties__maven-javadoc-plugin.version>3.0.0</m:properties__maven-javadoc-plugin.version>
		<m:dependency.management__com.google.truth__truth__scope>test</m:dependency.management__com.google.truth__truth__scope>
		<m:dependency.management__com.google.j2objc__j2objc-annotations__version>1.1</m:dependency.management__com.google.j2objc__j2objc-annotations__version>
		<m:dependency.management__com.google.truth__truth__exclusion_0>com.google.guava__guava</m:dependency.management__com.google.truth__truth__exclusion_0>
		<m:dependency.management__org.easymock__easymock__version>3.0</m:dependency.management__org.easymock__easymock__version>
		<e:sbtTransformHash>68e22c4f23bdee467eecd27a5839c7f9b3084967</e:sbtTransformHash>
		<m:properties__sonatypeOssDistMgmtSnapshotsUrl>https://oss.sonatype.org/content/repositories/snapshots/</m:properties__sonatypeOssDistMgmtSnapshotsUrl>
		<m:maven.plugins>org.apache.maven.plugins__maven-enforcer-plugin__1.2|org.apache.maven.plugins__maven-enforcer-plugin__1.2|null__maven-javadoc-plugin__3.0.0|org.apache.maven.plugins__maven-enforcer-plugin__1.2|org.apache.maven.plugins__maven-enforcer-plugin__1.2|null__maven-javadoc-plugin__3.0.0|null__maven-source-plugin__null|org.codehaus.mojo__animal-sniffer-maven-plugin__null|null__maven-javadoc-plugin__null</m:maven.plugins>
		<m:dependency.management__com.google.caliper__caliper__scope>test</m:dependency.management__com.google.caliper__caliper__scope>
		<m:dependency.management__junit__junit__scope>test</m:dependency.management__junit__junit__scope>
		<m:properties__animal.sniffer.version>1.14</m:properties__animal.sniffer.version>
		<m:properties__test.include>%regex[.*.class]</m:properties__test.include>
		<m:dependency.management__com.google.caliper__caliper__exclusion_0>com.google.guava__guava</m:dependency.management__com.google.caliper__caliper__exclusion_0>
		<m:dependency.management__org.mockito__mockito-core__version>2.19.0</m:dependency.management__org.mockito__mockito-core__version>
		<m:properties__project.build.sourceEncoding>UTF-8</m:properties__project.build.sourceEncoding>
		<m:dependency.management__org.easymock__easymock__scope>test</m:dependency.management__org.easymock__easymock__scope>
		<m:dependency.management__com.google.caliper__caliper__version>1.0-beta-2</m:dependency.management__com.google.caliper__caliper__version>
		<m:dependency.management__org.mockito__mockito-core__scope>test</m:dependency.management__org.mockito__mockito-core__scope>
		<m:dependency.management__com.google.code.findbugs__jsr305__version>3.0.2</m:dependency.management__com.google.code.findbugs__jsr305__version>
		<m:dependency.management__com.google.jimfs__jimfs__version>1.1</m:dependency.management__com.google.jimfs__jimfs__version>
	</info>
	<configurations>
		<conf name="default" visibility="public" description="runtime dependencies and master artifact can be used with this conf" extends="runtime,master"/>
		<conf name="master" visibility="public" description="contains only the artifact published by this module itself, with no transitive dependencies"/>
		<conf name="compile" visibility="public" description="this is the default scope, used if none is specified. Compile dependencies are available in all classpaths."/>
		<conf name="provided" visibility="public" description="this is much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive."/>
		<conf name="runtime" visibility="public" description="this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath." extends="compile"/>
		<conf name="test" visibility="private" description="this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases." extends="runtime"/>
		<conf name="system" visibility="public" description="this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository."/>
		<conf name="sources" visibility="public" description="this configuration contains the source artifact of this module, if any."/>
		<conf name="javadoc" visibility="public" description="this configuration contains the javadoc artifact of this module, if any."/>
		<conf name="optional" visibility="public" description="contains all optional dependencies"/>
	</configurations>
	<publications>
		<artifact name="listenablefuture" type="jar" ext="jar" conf="master"/>
	</publications>
</ivy-module>
