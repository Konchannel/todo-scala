<?xml version="1.0" encoding="UTF-8"?>
<ivy-module version="2.0" xmlns:m="http://ant.apache.org/ivy/maven" xmlns:e="http://ant.apache.org/ivy/extra">
	<info organisation="com.googlecode.javaewah"
		module="JavaEWAH"
		revision="1.1.6"
		status="release"
		publication="20160427024037"
	>
		<license name="Apache 2" url="http://www.apache.org/licenses/LICENSE-2.0.txt" />
		<description homepage="https://github.com/lemire/javaewah">
		The bit array data structure is implemented in Java as the BitSet class. Unfortunately, this fails to scale without compression.
  JavaEWAH is a word-aligned compressed variant of the Java bitset class. It uses a 64-bit run-length encoding (RLE) compression scheme.
  The goal of word-aligned compression is not to achieve the best compression, but rather to improve query processing time. Hence, we try to save CPU cycles, maybe at the expense of storage. However, the EWAH scheme we implemented is always more efficient storage-wise than an uncompressed bitmap (implemented in Java as the BitSet class). Unlike some alternatives, javaewah does not rely on a patented scheme.
		</description>
		<e:sbtTransformHash>1c5b5f0da3c578bee7ba641689feab7a3efff7ef</e:sbtTransformHash>
		<m:properties__maven.compiler.target>1.6</m:properties__maven.compiler.target>
		<m:properties__project.build.sourceEncoding>UTF-8</m:properties__project.build.sourceEncoding>
		<m:properties__encoding>UTF-8</m:properties__encoding>
		<m:properties__sonatypeOssDistMgmtSnapshotsUrl>https://oss.sonatype.org/content/repositories/snapshots/</m:properties__sonatypeOssDistMgmtSnapshotsUrl>
		<m:maven.plugins>org.apache.maven.plugins__maven-enforcer-plugin__1.0-beta-1|org.apache.maven.plugins__maven-enforcer-plugin__1.0-beta-1|org.apache.maven.plugins__maven-surefire-plugin__2.19.1|org.codehaus.mojo__animal-sniffer-maven-plugin__1.9|org.jacoco__jacoco-maven-plugin__0.7.2.201409121644|org.eluder.coveralls__coveralls-maven-plugin__3.1.0|org.apache.felix__maven-bundle-plugin__2.3.7|org.apache.maven.plugins__maven-gpg-plugin__1.4|org.apache.maven.plugins__maven-javadoc-plugin__2.8|org.apache.maven.plugins__maven-source-plugin__2.1.2</m:maven.plugins>
		<m:properties__maven.compiler.source>1.6</m:properties__maven.compiler.source>
	</info>
	<configurations>
		<conf name="default" visibility="public" description="runtime dependencies and master artifact can be used with this conf" extends="runtime,master"/>
		<conf name="master" visibility="public" description="contains only the artifact published by this module itself, with no transitive dependencies"/>
		<conf name="compile" visibility="public" description="this is the default scope, used if none is specified. Compile dependencies are available in all classpaths."/>
		<conf name="provided" visibility="public" description="this is much like compile, but indicates you expect the JDK or a container to provide it. It is only available on the compilation classpath, and is not transitive."/>
		<conf name="runtime" visibility="public" description="this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath." extends="compile"/>
		<conf name="test" visibility="private" description="this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases." extends="runtime"/>
		<conf name="system" visibility="public" description="this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository."/>
		<conf name="sources" visibility="public" description="this configuration contains the source artifact of this module, if any."/>
		<conf name="javadoc" visibility="public" description="this configuration contains the javadoc artifact of this module, if any."/>
		<conf name="optional" visibility="public" description="contains all optional dependencies"/>
	</configurations>
	<publications>
		<artifact name="JavaEWAH" type="bundle" ext="jar" conf="master"/>
	</publications>
	<dependencies>
		<dependency org="junit" name="junit" rev="4.10" force="true" conf="test->runtime(*),master(compile)"/>
	</dependencies>
</ivy-module>
